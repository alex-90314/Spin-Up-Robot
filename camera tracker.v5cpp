#pragma region VEXcode Generated Robot Configuration
// Make sure all required headers are included.
#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>
#include <math.h>
#include <string.h>


#include "vex.h"

using namespace vex;

// Brain should be defined by default
brain Brain;


// START V5 MACROS
#define waitUntil(condition)                                                   \
  do {                                                                         \
    wait(5, msec);                                                             \
  } while (!(condition))

#define repeat(iterations)                                                     \
  for (int iterator = 0; iterator < iterations; iterator++)
// END V5 MACROS


// Robot configuration code.
/*vex-vision-config:begin*/
vision::signature camera__SIG_1 = vision::signature (1, 2835, 4217, 3526,-6851, -5509, -6180,3.6, 0);
vision camera = vision (PORT11, 50, camera__SIG_1);
/*vex-vision-config:end*/
motor angleMtr = motor(PORT20, ratio18_1, false);
#pragma endregion VEXcode Generated Robot Configuration

/*----------------------------------------------------------------------------*/
/*                                                                            */
/*    Module:       main.cpp                                                  */
/*    Author:       {author}                                                  */
/*    Created:      {date}                                                    */
/*    Description:  V5 project                                                */
/*                                                                            */
/*----------------------------------------------------------------------------*/

// Include the V5 Library
#include "vex.h"
  
// Allows for easier use of the VEX Library
using namespace vex;

int main() {
  angleMtr.setStopping(hold);
  angleMtr.setVelocity(2,percent);
  while (true){
    camera.takeSnapshot(camera__SIG_1);
    if (camera.largestObject.exists){
      Brain.Screen.clearScreen();
      Brain.Screen.setCursor(1,1);
      Brain.Screen.print("Object Seen   centerX: %f, centerY: %f      ",camera.largestObject.centerX, camera.largestObject.centerY);
      Brain.Screen.print(angleMtr.position(degrees));
      while ((camera.largestObject.centerY < 190 || camera.largestObject.centerY > 210)/* && (angleMtr.position(degrees) <= 10.0) && angleMtr.position(degrees) >= -90.0*/ && camera.largestObject.exists) {
        camera.takeSnapshot(camera__SIG_1);
        Brain.Screen.setCursor(2,1);
        Brain.Screen.clearLine(2);
        Brain.Screen.print("Adjusting camera...  centerX: %f, centerY: %f      ",camera.largestObject.centerX, camera.largestObject.centerY);
        if (camera.largestObject.centerY < 190) {
          angleMtr.spin(forward);
        } else if (camera.largestObject.centerY > 210) {
          angleMtr.spin(reverse);
        } else { 
          angleMtr.stop();
        }
        wait(0.05,seconds);
      }/*
      if (angleMtr.position(degrees) < -90.0) {
        angleMtr.spinToPosition(-89.9,degrees);
      }
      else if (angleMtr.position(degrees) > 10.0) {
        angleMtr.spinToPosition(9.9, degrees);
      }*/
      angleMtr.stop();
      wait(0.1,seconds);
    } else {
      angleMtr.stop();
    }
  }
}
