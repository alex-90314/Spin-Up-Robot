#pragma region VEXcode Generated Robot Configuration
// Make sure all required headers are included.
#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>
#include <math.h>
#include <string.h>


#include "vex.h"

using namespace vex;

// Brain should be defined by default
brain Brain;


// START V5 MACROS
#define waitUntil(condition)                                                   \
  do {                                                                         \
    wait(5, msec);                                                             \
  } while (!(condition))

#define repeat(iterations)                                                     \
  for (int iterator = 0; iterator < iterations; iterator++)
// END V5 MACROS


// Robot configuration code.
motor leftMtr = motor(PORT20, ratio18_1, true);

motor rightMtr = motor(PORT11, ratio18_1, false);

controller Controller1 = controller(primary);
motor aimMtr = motor(PORT10, ratio18_1, false);

motor shootMtrMotorA = motor(PORT15, ratio18_1, false);
motor shootMtrMotorB = motor(PORT19, ratio18_1, true);
motor_group shootMtr = motor_group(shootMtrMotorA, shootMtrMotorB);

motor strMtr = motor(PORT17, ratio18_1, false);




// define variable for remote controller enable/disable
bool RemoteControlCodeEnabled = true;
#pragma endregion VEXcode Generated Robot Configuration

// ----------------------------------------------------------------------------
//                                                                            
//    Project:                                               
//    Author:
//    Created:
//    Configuration:        
//                                                                            
// ----------------------------------------------------------------------------

// Include the V5 Library
#include "vex.h"
#include "string"

// Allows for easier use of the VEX Library
using namespace vex;

// Begin project code

std::string curDir = "";

void strL() {
  if (curDir != "l") {
    strMtr.spin(forward);
    curDir = "l";
  } else {
    curDir = "";
    strMtr.stop();
  }
}
void strR(){
  if (curDir != "r") {
    strMtr.spin(reverse);
    curDir = "r";
  } else {
    curDir = "";
    strMtr.stop();
  }
}

bool aimSpinning = false;


void aimUp(){
  aimMtr.setVelocity(50,percent);
  aimMtr.setStopping(hold);
  if (!aimSpinning) {
    aimMtr.spin(forward);
    aimSpinning = true;
  } else {
    aimMtr.stop();
    aimSpinning = false;
  }
}

void aimDown(){
  aimMtr.setVelocity(50,percent);
  aimMtr.setStopping(hold);
  if (!aimSpinning) {
    aimMtr.spin(reverse);
    aimSpinning = true;
  } else {
    aimMtr.stop();
    aimSpinning = false;
  }
}

bool pickingUp = false;

void pickUpToggle(){
  if (!pickingUp) {
    shootMtr.setVelocity(50,percent);
    shootMtr.spin(forward);
    pickingUp = true;
  } else {
    shootMtr.stop();
    pickingUp = false;
  }
}

void shoot(){
  if (!shootMtr.isSpinning()) {
    shootMtr.setVelocity(100,percent);
    shootMtr.spin(reverse);
    wait(0.5,seconds);
    shootMtr.stop();
  }
}

void preAutonomous(void) {
  // actions to do when the program starts
  Brain.Screen.clearScreen();
  Brain.Screen.print("pre auton code");
  wait(1, seconds);
}

void autonomous(void) {
  Brain.Screen.clearScreen();
  Brain.Screen.print("autonomous code");
  // place automonous code here
}

void userControl(void) {
  Brain.Screen.clearScreen();
  leftMtr.spin(forward);
  rightMtr.spin(forward);
  // place driver control in this while loop
  Controller1.ButtonL2.released(strL);
  Controller1.ButtonR2.released(strR);
  Controller1.ButtonUp.pressed(aimUp);
  Controller1.ButtonUp.released(aimUp); 
  Controller1.ButtonDown.pressed(aimDown);
  Controller1.ButtonDown.released(aimDown);
  Controller1.ButtonB.released(pickUpToggle);
  Controller1.ButtonA.released(shoot);
  while (true) {
    leftMtr.setVelocity(Controller1.Axis2.position()*1.5, rpm);
    rightMtr.setVelocity(Controller1.Axis3.position()*1.5, rpm);
    wait(20, msec);
  }
}

void endLIFE() {
  vexSystemExitRequest();
}

int main() {
  // create competition instance
  competition Competition;

  Controller1.ButtonX.released(endLIFE);

  // Set up callbacks for autonomous and driver control periods.
  Competition.autonomous(autonomous);
  Competition.drivercontrol(userControl);

  // Run the pre-autonomous function.
  preAutonomous();

  // Prevent main from exiting with an infinite loop.
  while (true) {
    wait(100, msec);
  }
}
